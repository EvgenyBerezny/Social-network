{"version":3,"file":"static/js/903.31e777f4.chunk.js","mappings":"oKACA,GAAgB,QAAU,yBAAyB,GAAK,oBAAoB,MAAQ,uBAAuB,QAAU,yBAAyB,SAAW,0BAA0B,KAAO,sBAAsB,WAAa,4BAA4B,WAAa,4BAA4B,KAAO,uB,4BCYzS,EATmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,WAAiB,UAC7B,SAAC,KAAO,CAACC,GAAIJ,EAAME,UAAWG,EAAAA,EAAc,SAAEN,EAAMO,QAGhE,ECJA,EALgB,SAACP,GACb,OACI,gBAAKG,UAAWC,EAAAA,QAAc,SAAEJ,EAAMQ,SAE9C,E,iDCCMC,GAAcC,EAAAA,EAAAA,GAAiB,IAkBrC,GAJ4BC,EAAAA,EAAAA,GAAU,CAClCC,KAAM,wBADkBD,EAZL,SAACX,GACpB,OACI,iBAAMa,SAAUb,EAAMc,aAAa,UAC/B,4BACI,SAACC,EAAA,EAAK,CAACC,UAAWC,EAAAA,EAAcV,KAAM,iBAAkBW,YAAa,WAC9DC,YAAa,qBAAsBhB,UAAWC,EAAAA,KAAYgB,SAAU,CAACC,EAAAA,EAAeZ,MAC3F,iDAIhB,ICkBA,EA9BgB,SAACT,GAEb,IAAIsB,EAAYtB,EAAMuB,YAAYC,WAAWC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAU,CAACnB,KAAMmB,EAAOnB,KAAML,GAAIwB,EAAOxB,IAAK,IACtGyB,EAAa3B,EAAMuB,YAAYK,YAAYH,KAAI,SAAAI,GAAG,OAAI,SAAC,EAAO,CAACrB,QAASqB,EAAIrB,SAAU,IAM1F,OACI,iBAAKL,UAAWC,EAAAA,QAAc,WAC1B,gBAAKF,GAAIE,EAAAA,GAAS,sBAClB,iBAAKD,UAAWC,EAAAA,MAAY,WACxB,gBAAKD,UAAWC,EAAAA,QAAc,SACzBkB,KAEL,iBAAKnB,UAAWC,EAAAA,SAAe,WAC3B,+BAAQuB,EAAU,QAClB,gBAAKxB,UAAWC,EAAAA,WAAiB,UAC7B,SAAC,EAAmB,CAACS,SAdrB,SAACiB,GACjB9B,EAAM+B,WAAWD,EAAOE,eAC5B,cAmBJ,E,oBCVA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACC,GACnB,MAAO,CACHZ,YAAaY,EAAMC,YAE3B,IAEyB,SAACC,GACtB,MAAO,CACHN,WAAY,SAACC,GACTK,GAASC,EAAAA,EAAAA,GAAwBN,GACrC,EAER,IAIIO,EAAAA,EAFJ,CAGEC,E","sources":["webpack://app-test/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Message/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"padding\":\"Dialogs_padding__GS0Nm\",\"h1\":\"Dialogs_h1__wwhjW\",\"chats\":\"Dialogs_chats__kXAFb\",\"dialogs\":\"Dialogs_dialogs__h0FsE\",\"messages\":\"Dialogs_messages__J+pV8\",\"area\":\"Dialogs_area__IE0dH\",\"addMessage\":\"Dialogs_addMessage__xXtEj\",\"newMessage\":\"Dialogs_newMessage__Z-TzL\",\"send\":\"Dialogs_send__-xhYa\"};","import style from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {activeNavLink} from \"../../Navbar/Navbar\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={style.dialogItem}>\r\n            <NavLink to={path} className={activeNavLink}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import style from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={style.message}>{props.message}</div>\r\n    )\r\n}\r\nexport default Message;","import {Field, reduxForm} from \"redux-form\";\r\nimport style from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utilits/validator/validators\";\r\nimport {FormsControl} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst maxLength40 = maxLengthCreator(40);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={FormsControl} name={\"newMessageBody\"} elementType={\"textarea\"}\r\n                       placeholder={\"Enter your message\"} className={style.area} validate={[requiredField, maxLength40]}/>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default AddMessageReduxForm;","import style from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport React from \"react\";\r\nimport AddMessageReduxForm from \"./Message/AddMessageForm\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsEl = props.dialogsPage.dialogData.map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>);\r\n    let messagesEl = props.dialogsPage.messageData.map(mes => <Message message={mes.message}/>);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.addMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={style.padding}>\r\n            <div id={style.h1}>Dialogs</div>\r\n            <div className={style.chats}>\r\n                <div className={style.dialogs}>\r\n                    {dialogsEl}\r\n                </div>\r\n                <div className={style.messages}>\r\n                    <div> { messagesEl } </div>\r\n                    <div className={style.newMessage}>\r\n                        <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import {addMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {authRedirect} from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogState\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(addMessageActionCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    authRedirect\r\n)(Dialogs);\r\n//\r\n// let AuthRedirectComponent = authRedirect(Dialogs);\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n//\r\n// export default DialogsContainer;\r\n\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//             (store) => {\r\n//                 let state = store.getState().dialogState;\r\n//\r\n//                 let addMessage = () => {\r\n//                     store.dispatch(addMessageActionCreator());\r\n//                 }\r\n//                 let onMessageChange = (text) => {\r\n//                     store.dispatch(newMessageTextActionCreator(text));\r\n//                 }\r\n//\r\n//                 return <Dialogs updateNewMessageText={onMessageChange}\r\n//                                 addMessage={addMessage}\r\n//                                 dialogsPage={state}/>\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }"],"names":["props","path","id","className","style","to","activeNavLink","name","message","maxLength40","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","FormsControl","elementType","placeholder","validate","requiredField","dialogsEl","dialogsPage","dialogData","map","dialog","messagesEl","messageData","mes","values","addMessage","newMessageBody","compose","connect","state","dialogState","dispatch","addMessageActionCreator","authRedirect","Dialogs"],"sourceRoot":""}